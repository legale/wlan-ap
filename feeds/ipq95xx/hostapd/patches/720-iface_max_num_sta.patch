Index: hostapd-2023-02-21-ath12.3-cs/hostapd/config_file.c
===================================================================
--- hostapd-2023-02-21-ath12.3-cs.orig/hostapd/config_file.c
+++ hostapd-2023-02-21-ath12.3-cs/hostapd/config_file.c
@@ -2778,6 +2778,14 @@ static int hostapd_config_fill(struct ho
 				   line, bss->max_num_sta, MAX_STA_COUNT);
 			return 1;
 		}
+	} else if (os_strcmp(buf, "iface_max_num_sta") == 0) {
+		conf->max_num_sta = atoi(pos);
+		if (conf->max_num_sta < 0 ||
+		    conf->max_num_sta > MAX_STA_COUNT) {
+			wpa_printf(MSG_ERROR, "Line %d: Invalid max_num_sta=%d; allowed range 0..%d",
+				   line, conf->max_num_sta, MAX_STA_COUNT);
+			return 1;
+		}
 	} else if (os_strcmp(buf, "wpa") == 0) {
 		bss->wpa = atoi(pos);
 	} else if (os_strcmp(buf, "extended_key_id") == 0) {
Index: hostapd-2023-02-21-ath12.3-cs/src/ap/hostapd.h
===================================================================
--- hostapd-2023-02-21-ath12.3-cs.orig/src/ap/hostapd.h
+++ hostapd-2023-02-21-ath12.3-cs/src/ap/hostapd.h
@@ -790,6 +790,7 @@ void hostapd_periodic_iface(struct hosta
 int hostapd_owe_trans_get_info(struct hostapd_data *hapd);
 void hostapd_ocv_check_csa_sa_query(void *eloop_ctx, void *timeout_ctx);
 void free_beacon_data(struct beacon_data *beacon);
+int hostapd_check_max_sta(struct hostapd_data *hapd);
 
 void hostapd_switch_color(struct hostapd_data *hapd, u64 bitmap);
 void hostapd_cleanup_cca_params(struct hostapd_data *hapd);
Index: hostapd-2023-02-21-ath12.3-cs/src/ap/hostapd.c
===================================================================
--- hostapd-2023-02-21-ath12.3-cs.orig/src/ap/hostapd.c
+++ hostapd-2023-02-21-ath12.3-cs/src/ap/hostapd.c
@@ -277,6 +277,29 @@ static int hostapd_iface_conf_changed(st
 	return 0;
 }
 
+static inline int hostapd_iface_num_sta(struct hostapd_iface *iface)
+{
+	int num_sta = 0;
+	int i;
+
+	for (i = 0; i < iface->num_bss; i++)
+		num_sta += iface->bss[i]->num_sta;
+
+	return num_sta;
+}
+
+
+int hostapd_check_max_sta(struct hostapd_data *hapd)
+{
+	if (hapd->num_sta >= hapd->conf->max_num_sta)
+		return 1;
+
+	if (hapd->iconf->max_num_sta &&
+	    hostapd_iface_num_sta(hapd->iface) >= hapd->iconf->max_num_sta)
+		return 1;
+
+	return 0;
+}
 
 int hostapd_reload_config(struct hostapd_iface *iface)
 {
Index: hostapd-2023-02-21-ath12.3-cs/src/ap/beacon.c
===================================================================
--- hostapd-2023-02-21-ath12.3-cs.orig/src/ap/beacon.c
+++ hostapd-2023-02-21-ath12.3-cs/src/ap/beacon.c
@@ -1642,7 +1642,7 @@ void handle_probe_req(struct hostapd_dat
 	if (hapd->conf->no_probe_resp_if_max_sta &&
 	    is_multicast_ether_addr(mgmt->da) &&
 	    is_multicast_ether_addr(mgmt->bssid) &&
-	    hapd->num_sta >= hapd->conf->max_num_sta &&
+	    hostapd_check_max_sta(hapd) &&
 	    !ap_get_sta(hapd, mgmt->sa)) {
 		wpa_printf(MSG_MSGDUMP, "%s: Ignore Probe Request from " MACSTR
 			   " since no room for additional STA",
Index: hostapd-2023-02-21-ath12.3-cs/src/ap/ap_config.h
===================================================================
--- hostapd-2023-02-21-ath12.3-cs.orig/src/ap/ap_config.h
+++ hostapd-2023-02-21-ath12.3-cs/src/ap/ap_config.h
@@ -1044,6 +1044,8 @@ struct hostapd_config {
 	unsigned int track_sta_max_num;
 	unsigned int track_sta_max_age;
 
+	int max_num_sta;
+
 	char country[3]; /* first two octets: country code as described in
 			  * ISO/IEC 3166-1. Third octet:
 			  * ' ' (ascii 32): all environments
