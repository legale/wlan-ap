From a99923e898ae759100df9724695f2ee40aa5eef4 Mon Sep 17 00:00:00 2001
From: Balamurugan Mahalingam <quic_bmahalin@quicinc.com>
Date: Thu, 7 Sep 2023 20:53:36 -0700
Subject: [PATCH] ath12k: Wait for tx activity to complete before deleting
 arvif

Tx activity may be still in progress while arvif is getting deleted.
Wait for tx activity to stop before deleting arvif.

Signed-off-by: Balamurugan Mahalingam <quic_bmahalin@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h |  1 +
 drivers/net/wireless/ath/ath12k/mac.c  | 22 +++++++++++++++++++++-
 2 files changed, 22 insertions(+), 1 deletion(-)

--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -403,6 +403,7 @@ struct ath12k_link_vif {
 
 	bool is_created;
 	bool is_started;
+	bool tx_in_progress;
 	bool is_up;
 	bool pending_up;
 	bool spectral_enabled;
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -4895,9 +4895,17 @@ static int ath12k_mac_vdev_delete(struct
 	struct ath12k_vif *ahvif = arvif->ahvif;
 	unsigned long time_left;
 	int ret = 0;
+	int count = 0;
 
 	lockdep_assert_held(&ar->conf_mutex);
 
+	WARN_ON(arvif->is_up);
+
+	while (arvif->tx_in_progress && count <= 10) {
+		mdelay(20);
+		count++;
+	}
+
 	reinit_completion(&ar->vdev_delete_done);
 
 	ret = ath12k_wmi_vdev_delete(ar, arvif->vdev_id);
@@ -9224,17 +9232,21 @@ static void ath12k_mac_op_tx(struct ieee
 	arvif = ahvif->link[link];
 	skb_cb->link_id = link;
 
-	if (!arvif || !arvif->ar) {
+	if (!arvif || !arvif->ar ||
+	   (!arvif->is_up && ahvif->vdev_type == WMI_VDEV_TYPE_AP)) {
 		ieee80211_free_txskb(hw, skb);
 		return;
 	}
 
+	arvif->tx_in_progress = true;
+
 	ar = arvif->ar;
 
 	ah = ar->ah;
 
 	if (unlikely(test_bit(ATH12K_FLAG_CRASH_FLUSH, &ar->ab->dev_flags))) {
 		ieee80211_free_txskb(ah->hw, skb);
+		arvif->tx_in_progress = false;
 		return;
 	}
 
@@ -9246,6 +9258,7 @@ static void ath12k_mac_op_tx(struct ieee
 				   "failed fast tx due to limit check pdev idx %d\n",
 				   ar->pdev_idx);
 			ieee80211_free_txskb(hw, skb);
+			arvif->tx_in_progress = false;
 			return;
 		}
 
@@ -9255,6 +9268,7 @@ static void ath12k_mac_op_tx(struct ieee
 				   "failed to transmit frame %d\n", ret);
 			ieee80211_free_txskb(hw, skb);
 		}
+		arvif->tx_in_progress = false;
 		return;
 	}
 #endif
@@ -9287,6 +9301,7 @@ static void ath12k_mac_op_tx(struct ieee
 			mgmt_stats->tx_succ_cnt[frm_type]++;
 			spin_unlock_bh(&ar->data_lock);
 		}
+		arvif->tx_in_progress = false;
 		return;
 	} else
 		is_mcast = is_multicast_ether_addr(hdr->addr1);
@@ -9312,6 +9327,7 @@ static void ath12k_mac_op_tx(struct ieee
 				   "failed due to limit check pdev idx %d\n",
 				   ar->pdev_idx);
 			ieee80211_free_txskb(hw, skb);
+			arvif->tx_in_progress = false;
 			return;
 		}
 
@@ -9343,6 +9359,7 @@ static void ath12k_mac_op_tx(struct ieee
 			tmp_arvif = ahvif->link[link_id];
 			if (!(tmp_arvif && tmp_arvif->is_up))
 				continue;
+			tmp_arvif->tx_in_progress = true;
 
 			tmp_ar = tmp_arvif->ar;
 
@@ -9354,6 +9371,7 @@ static void ath12k_mac_op_tx(struct ieee
 				ath12k_dbg(tmp_ar->ab, ATH12K_DBG_MAC,
 					   "failed mcast tx due to limit check pdev idx %d\n",
 					   tmp_ar->pdev_idx);
+				tmp_arvif->tx_in_progress = false;
 				continue;
 			}
 
@@ -9362,6 +9380,7 @@ static void ath12k_mac_op_tx(struct ieee
 				ath12k_err(ar->ab,
 					   "skb copy failure link_id 0x%X vdevid 0x%X\n",
 					   link_id, tmp_arvif->vdev_id);
+				tmp_arvif->tx_in_progress = false;
 				continue;
 			}
 
@@ -9387,6 +9406,7 @@ static void ath12k_mac_op_tx(struct ieee
 					    ahvif->links_map);
 				WARN_ON_ONCE(1);
 				ieee80211_free_txskb(ah->hw, msdu_copied);
+				tmp_arvif->tx_in_progress = false;
 				continue;
 			}
 
@@ -9415,9 +9435,11 @@ skip_peer_find:
 
 				ieee80211_free_txskb(ah->hw, msdu_copied);
 			}
+			tmp_arvif->tx_in_progress = false;
 		}
 		ieee80211_free_txskb(ah->hw, skb);
 	}
+	arvif->tx_in_progress = false;
 
 }
 
