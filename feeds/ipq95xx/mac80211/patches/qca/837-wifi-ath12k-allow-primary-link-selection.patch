From 86f1e6c92c43dff0b3305d96c766787146ae2d88 Mon Sep 17 00:00:00 2001
From: Maharaja Kennadyrajan <quic_mkenna@quicinc.com>
Date: Fri, 18 Aug 2023 19:51:19 +0530
Subject: [PATCH] ath12k: allow primary link selection based on HW params

Signed-off-by: Maharaja Kennadyrajan <quic_mkenna@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h |  1 +
 drivers/net/wireless/ath/ath12k/dp.c   |  4 +++-
 drivers/net/wireless/ath/ath12k/hw.c   |  4 ++++
 drivers/net/wireless/ath/ath12k/hw.h   |  1 +
 drivers/net/wireless/ath/ath12k/mac.c  | 30 ++++++++++++++++----------
 drivers/net/wireless/ath/ath12k/peer.c |  3 ---
 6 files changed, 28 insertions(+), 15 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -490,8 +490,10 @@ struct ath12k_vif {
 	u8 last_scan_link;
 #ifdef CPTCFG_ATH12K_DEBUGFS
 	struct dentry *debugfs_linkstats;
+	struct dentry *debugfs_primary_link;
 #endif /* CPTCFG_ATH12K_DEBUGFS */
 	bool mcast_to_ucast_en;
+	u8 primary_link_id;
 };
 
 struct ath12k_vif_iter {
@@ -714,6 +716,7 @@ struct ath12k_sta {
 	 * ONLY used currently in recovery case
 	 */
 	bool low_ack_sent;
+	u8 primary_link_id;
  };
 #define ATH12K_HALF_20MHZ_BW 10
 #define ATH12K_2G_MIN_CENTER 2412
--- a/drivers/net/wireless/ath/ath12k/dp.c
+++ b/drivers/net/wireless/ath/ath12k/dp.c
@@ -124,11 +124,14 @@ int ath12k_dp_peer_setup(struct ath12k *
 		goto free_shash;
 	}
 
-	if (!peer->primary_link) {
+	if (peer->mlo && peer->link_id != arsta->ahsta->primary_link_id) {
 		ret = 0;
+		peer->primary_link = false;
 		goto free_shash;
 	}
 
+	peer->primary_link = true;
+
 	for (tid = 0; tid <= IEEE80211_NUM_TIDS; tid++) {
 		ret = ath12k_dp_rx_peer_tid_setup(ar, tid, 1, 0, HAL_PN_TYPE_NONE, peer);
 		if (ret) {
--- a/drivers/net/wireless/ath/ath12k/hw.c
+++ b/drivers/net/wireless/ath/ath12k/hw.c
@@ -1506,6 +1506,7 @@ static struct ath12k_hw_params ath12k_hw
 		.send_platform_model = false,
 		.en_fwlog = true,
 		.support_umac_reset = false,
+		.is_plink_preferrable = true,
 	},
 	{
 		.name = "wcn7850 hw2.0",
@@ -1576,6 +1577,7 @@ static struct ath12k_hw_params ath12k_hw
 		.send_platform_model = false,
 		.en_fwlog = true,
 		.support_umac_reset = false,
+		.is_plink_preferrable = true,
 	},
 	{
 		.name = "qcn9274 hw2.0",
@@ -1655,6 +1657,7 @@ static struct ath12k_hw_params ath12k_hw
 		.en_fwlog = true,
 		.support_umac_reset = true,
 		.support_ce_manual_poll = true,
+		.is_plink_preferrable = true,
 	},
 	{
 		.name = "ipq5332 hw1.0",
@@ -1737,6 +1740,7 @@ static struct ath12k_hw_params ath12k_hw
 		.en_fwlog = true,
 		.support_umac_reset = false,
 		.support_ce_manual_poll=true,
+		.is_plink_preferrable = false,
 	},
 };
 
--- a/drivers/net/wireless/ath/ath12k/hw.h
+++ b/drivers/net/wireless/ath/ath12k/hw.h
@@ -234,6 +234,7 @@ struct ath12k_hw_params {
 	bool support_ce_manual_poll;
 	const struct pmm_remap *pmm_remap;
 	bool support_umac_reset;
+	bool is_plink_preferrable;
 };
 
 /* BRINGUP: move to dp.h */
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -3394,7 +3394,11 @@ static void ath12k_peer_assoc_h_mlo(stru
 	ml->enabled = true;
 	ml->assoc_link = arsta->is_assoc_link;
 	/* For now considering the primary umac based on assoc link */
-	ml->primary_umac = arsta->is_assoc_link;
+	if (arsta->link_id == ahsta->primary_link_id)
+		ml->primary_umac = true;
+	else
+		ml->primary_umac = false;
+
 	ml->peer_id_valid = true;
 	ml->logical_link_idx_valid = true;
 
@@ -3417,7 +3421,10 @@ static void ath12k_peer_assoc_h_mlo(stru
 		ml->partner_info[i].vdev_id = arvif->vdev_id;
 		ml->partner_info[i].hw_link_id = arvif->ar->pdev->hw_link_id;
 		ml->partner_info[i].assoc_link = arsta_p->is_assoc_link;
-		ml->partner_info[i].primary_umac = arsta_p->is_assoc_link;
+		if (arsta_p->link_id == ahsta->primary_link_id)
+			ml->partner_info[i].primary_umac = true;
+		else
+			ml->partner_info[i].primary_umac = false;
 		ml->partner_info[i].logical_link_idx_valid = true;
 		ml->partner_info[i].logical_link_idx = arsta_p->link_idx;
 		ml->num_partner_links++;
@@ -7020,13 +7027,6 @@ static int ath12k_mac_station_add(struct
 		}
 	}
 
-	ret = ath12k_dp_peer_setup(ar, arvif, arsta);
-	if (ret) {
-		ath12k_warn(ab, "failed to setup dp for peer %pM on vdev %i (%d)\n",
-			    arsta->addr, arvif->vdev_id, ret);
-		goto free_tx_stats;
-	}
-
 	if (ab->hw_params->vdev_start_delay &&
 	    !arvif->is_started &&
 	    ahvif->vdev_type != WMI_VDEV_TYPE_AP) {
@@ -7262,6 +7262,11 @@ static int ath12k_mac_handle_link_sta_st
 	} else if (old_state == IEEE80211_STA_AUTH &&
 		   new_state == IEEE80211_STA_ASSOC) {
 
+		ret = ath12k_dp_peer_setup(ar, arvif, arsta);
+		if (ret)
+			ath12k_warn(ar->ab, "failed to setup dp for peer %pM on vdev %i (%d)\n",
+				    arsta->addr, arvif->vdev_id, ret);
+
 		ath12k_dp_peer_default_route_setup(ar, arvif, arsta);
 
 		if (vif->type == NL80211_IFTYPE_AP ||
@@ -7439,6 +7444,7 @@ int ath12k_mac_update_sta_state(struct i
 
 		ahsta->deflink.is_assoc_link = true;
 		ahsta->assoc_link_id = link_id;
+		ahsta->primary_link_id = link_id;
 	}
 
 	if (new_state == IEEE80211_STA_NOTEXIST && old_state == IEEE80211_STA_NONE) {
@@ -7544,6 +7550,30 @@ static int ath12k_mac_op_change_sta_link
 	/* this op is expected only after initial sta insertion with default link */
 	WARN_ON(ahsta->links_map == 0);
 
+	/* TODO: update the primary selection logic for STA mode */
+	if (vif->type != NL80211_IFTYPE_AP)
+		goto skip_primary_link_selection;
+
+	if ((test_bit(ahvif->primary_link_id, &sta->valid_links))) {
+		arvif = ahvif->link[ahvif->primary_link_id];
+		if (arvif->ar->ab->hw_params->is_plink_preferrable) {
+			ahsta->primary_link_id = ahvif->primary_link_id;
+		} else {
+			ahsta->primary_link_id = ahsta->assoc_link_id;
+			arvif = ahvif->link[ahsta->assoc_link_id];
+			if (!arvif->ar->ab->hw_params->is_plink_preferrable) {
+				for_each_set_bit(link_id, &sta->valid_links,
+						 IEEE80211_MLD_MAX_NUM_LINKS) {
+					if (link_id != ahsta->primary_link_id) {
+						ahsta->primary_link_id = link_id;
+						break;
+					}
+				}
+			}
+		}
+	}
+
+skip_primary_link_selection:
 	for_each_set_bit(link_id, &new_links, IEEE80211_MLD_MAX_NUM_LINKS) {
 		if (ahsta->links_map & BIT(link_id))
 			continue;
@@ -9135,9 +9165,9 @@ static u8 ath12k_mac_get_tx_link(struct
 
 	/* enqueue eth data frames on assoc link */
 	if (info_flags & IEEE80211_TX_CTL_HW_80211_ENCAP)
-		return ahsta->assoc_link_id;
+		return ahsta->primary_link_id;
 	else if (ieee80211_is_data(hdr->frame_control))
-		return ahsta->assoc_link_id;
+		return ahsta->primary_link_id;
 
 	/* 802.11 frame cases */
 	if (link == IEEE80211_LINK_UNSPECIFIED)
--- a/drivers/net/wireless/ath/ath12k/peer.c
+++ b/drivers/net/wireless/ath/ath12k/peer.c
@@ -696,13 +696,10 @@ int ath12k_peer_create(struct ath12k *ar
 		/* Fill ML info into created peer */
 		if (sta->mlo) {
 			peer->ml_peer_id = ahsta->ml_peer_id | ATH12K_ML_PEER_ID_VALID;
-			/* the assoc link is considered primary for now */
-			peer->primary_link = arsta->is_assoc_link;
 			ether_addr_copy(peer->ml_addr, sta->addr);
 			peer->mlo = true;
 		} else {
 			peer->ml_peer_id = ATH12K_MLO_PEER_ID_INVALID;
-			peer->primary_link = true;
 			peer->mlo = false;
 		}
 	}
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -4773,6 +4773,52 @@ static const struct file_operations ath1
 	.llseek = default_llseek,
 };
 
+static ssize_t ath12k_write_primary_link(struct file *file,
+					 const char __user *user_buf,
+					 size_t count, loff_t *ppos)
+{
+	struct ath12k_vif *ahvif = file->private_data;
+	struct ath12k_hw *ah = ahvif->ah;
+	u8 primary_link;
+
+	if (kstrtou8_from_user(user_buf, count, 0, &primary_link))
+		return -EINVAL;
+
+	if (primary_link >= IEEE80211_MLD_MAX_NUM_LINKS)
+		return -EINVAL;
+
+	mutex_lock(&ah->conf_mutex);
+	ahvif->primary_link_id = primary_link;
+	mutex_unlock(&ah->conf_mutex);
+
+	return count;
+}
+
+static ssize_t ath12k_read_primary_link(struct file *file,
+					char __user *ubuf,
+					size_t count, loff_t *ppos)
+{
+	struct ath12k_vif *ahvif = file->private_data;
+	struct ath12k_hw *ah = ahvif->ah;
+	int len = 0;
+	char buf[32] = {0};
+
+	mutex_lock(&ah->conf_mutex);
+	len = scnprintf(buf, sizeof(buf) - len, "Primary link_id: %d\n",
+			ahvif->primary_link_id);
+	mutex_unlock(&ah->conf_mutex);
+
+	return simple_read_from_buffer(ubuf, count, ppos, buf, len);
+}
+
+static const struct file_operations ath12k_fops_primary_link = {
+	.open = simple_open,
+	.write = ath12k_write_primary_link,
+	.read = ath12k_read_primary_link,
+	.owner = THIS_MODULE,
+	.llseek = default_llseek,
+};
+
 int ath12k_debugfs_add_interface(struct ath12k_link_vif *arvif)
 {
 	struct ath12k_vif *ahvif = arvif->ahvif;
@@ -4860,6 +4906,32 @@ int ath12k_debugfs_add_interface(struct
 		ahvif->debugfs_linkstats = NULL;
 	}
 
+	if (ahvif->debugfs_primary_link)
+		goto exit;
+
+	ahvif->debugfs_primary_link = debugfs_create_file("primary_link",
+							  0644,
+							  vif->debugfs_dir,
+							  ahvif,
+							  &ath12k_fops_primary_link);
+	if (!ahvif->debugfs_primary_link ||
+	    IS_ERR(ahvif->debugfs_primary_link)) {
+		ath12k_warn(arvif->ar->ab,
+			    "failed to create primary link file\n");
+
+		debugfs_remove_recursive(arvif->debugfs_twt);
+		arvif->debugfs_twt = NULL;
+
+		if (hw->wiphy->num_hw) {
+			debugfs_remove(arvif->debugfs_rtsthreshold);
+			arvif->debugfs_rtsthreshold = NULL;
+		}
+
+		debugfs_remove(ahvif->debugfs_linkstats);
+		ahvif->debugfs_linkstats = NULL;
+
+		ahvif->debugfs_primary_link = NULL;
+	}
 exit:
 	return ret;
 }
@@ -4874,9 +4946,15 @@ void ath12k_debugfs_remove_interface(str
 		arvif->debugfs_twt = NULL;
 		arvif->debugfs_rtsthreshold = NULL;
 		ahvif->debugfs_linkstats = NULL;
+		ahvif->debugfs_primary_link = NULL;
 		return;
 	}
 
+	if (ahvif->debugfs_primary_link) {
+		debugfs_remove(ahvif->debugfs_primary_link);
+		ahvif->debugfs_primary_link = NULL;
+	}
+
 	if (ahvif->debugfs_linkstats) {
 		debugfs_remove(ahvif->debugfs_linkstats);
 		ahvif->debugfs_linkstats = NULL;
--- a/drivers/net/wireless/ath/ath12k/bondif.c
+++ b/drivers/net/wireless/ath/ath12k/bondif.c
@@ -388,11 +388,10 @@ static struct net_device *ath12k_mac_get
 	}
 
 	if (sta) {
-		/* TODO: Use Primary Link */
-		ndev = mldev->vif->link_ndev[ahsta->assoc_link_id];
-		ath12k_dbg(NULL, ATH12K_DBG_DP_TX, "[%s] %s:%d deliver packets for sta %pM ahsta->assoc_link_id %d ndev %s\n",
-				 current->comm, __func__, __LINE__,
-				 sta, ahsta->assoc_link_id, ndev->name);
+		ndev = mldev->vif->link_ndev[ahsta->primary_link_id];
+		ath12k_dbg(NULL, ATH12K_DBG_DP_TX, "[%s] %s:%d deliver packets for sta %pM ahsta->primary_link_id %d ndev %s\n",
+			   current->comm, __func__, __LINE__,
+			   sta, ahsta->primary_link_id, ndev->name);
 	}
 
 dvlan_check:
