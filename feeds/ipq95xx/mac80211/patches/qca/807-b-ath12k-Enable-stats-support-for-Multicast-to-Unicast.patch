From b57598ed44bb7b1e2501d3692a4dcfdac7da1ca3 Mon Sep 17 00:00:00 2001
From: Balamurugan Mahalingam <quic_bmahalin@quicinc.com>
Date: Mon, 14 Aug 2023 05:09:49 -0700
Subject: [PATCH 2/2] ath12k: Enable stats support for Multicast to Unicast
 conversion

Add stats to debug the mcast2ucast conversion feature.

Signed-off-by: Balamurugan Mahalingam <quic_bmahalin@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/bondif.c  | 15 +++++++---
 drivers/net/wireless/ath/ath12k/core.h    |  3 ++
 drivers/net/wireless/ath/ath12k/debugfs.c | 35 +++++++++++++++++++++++
 3 files changed, 49 insertions(+), 4 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/bondif.c
+++ b/drivers/net/wireless/ath/ath12k/bondif.c
@@ -595,6 +595,7 @@ static int ath12k_convert_to_unicast(str
 	struct sk_buff *skb_new;
 	int ring_id;
 	int ret = 0;
+	int len = 0;
 
 	if (!skb)
 		return -EINVAL;
@@ -602,6 +603,7 @@ static int ath12k_convert_to_unicast(str
 	ethhdr = (struct ethhdr *)skb->data;
 
 	ring_id = ab->hw_params->hw_ops->get_ring_selector(skb);
+	ab->soc_stats.bond_mcast2ucast_tried[ring_id]++;
 
 	spin_lock_bh(&ab->base_lock);
 	list_for_each_entry(peer, &ab->peers, list) {
@@ -621,16 +623,20 @@ static int ath12k_convert_to_unicast(str
 
 		skb_new = skb_clone(skb, GFP_ATOMIC);
 		if (!skb_new) {
+			ab->soc_stats.bond_mcast2ucast_drop[ring_id]++;
 			ret = -ENOMEM;
 			goto purge;
 		}
 		if (unlikely(ath12k_update_da(skb_new, peer->sta->addr))) {
+			ab->soc_stats.bond_mcast2ucast_drop[ring_id]++;
 			dev_kfree_skb(skb_new);
 			ret = -ENOMEM;
 			goto purge;
 		}
 		__skb_queue_tail(queue, skb_new);
+		len++;
 	}
+	ab->soc_stats.bond_mcast2ucast_converted[ring_id] += len;
 	goto out;
 purge:
 	__skb_queue_purge(queue);
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -1192,6 +1192,12 @@ struct ath12k_soc_dp_stats {
 	u32 bond_tx_mcast_enqueued[MAX_TCL_RING];
 	u32 bond_tx_ucast_dropped[MAX_TCL_RING];
 	u32 bond_tx_mcast_dropped[MAX_TCL_RING];
+	/* Number of frames successfully converted to ucast from mcast */
+	u32 bond_mcast2ucast_converted[MAX_TCL_RING];
+	/* Number of mcast frames tried for ucast conversion*/
+	u32 bond_mcast2ucast_tried[MAX_TCL_RING];
+	/* Number of times mcast to ucast conversion failed*/
+	u32 bond_mcast2ucast_drop[MAX_TCL_RING];
 	u32 reo_rx[DP_REO_DST_RING_MAX] [ATH12K_MAX_SOCS];
 	u32 fast_rx[DP_REO_DST_RING_MAX] [ATH12K_MAX_SOCS];
 	u32 non_fast_rx[DP_REO_DST_RING_MAX] [ATH12K_MAX_SOCS];
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -1738,6 +1738,41 @@ static ssize_t ath12k_debugfs_dump_soc_d
 			soc_stats->tx_completed[3]);
 
 
+	len += scnprintf(buf + len, size - len, "\nbond_tx_ucast_enqueued: ");
+	for (i = 0; i < MAX_TCL_RING; i++)
+		len += scnprintf(buf + len, size - len,"%u:%u ",
+				 i, soc_stats->bond_tx_ucast_enqueued[i]);
+
+	len += scnprintf(buf + len, size - len,	"\nbond_tx_mcast_enqueued: ");
+	for (i = 0; i < MAX_TCL_RING; i++)
+		len += scnprintf(buf + len, size - len,	"%u:%u ",
+				i, soc_stats->bond_tx_mcast_enqueued[i]);
+
+	len += scnprintf(buf + len, size - len, "\nbond_tx_ucast_dropped: ");
+	for (i = 0; i < MAX_TCL_RING; i++)
+		len += scnprintf(buf + len, size - len,	"%u:%u ",
+				i, soc_stats->bond_tx_ucast_dropped[i]);
+
+	len += scnprintf(buf + len, size - len, "\nbond_tx_mcast_dropped: ");
+	for (i = 0; i < MAX_TCL_RING; i++)
+		len += scnprintf(buf + len, size - len,	"%u:%u ",
+				i, soc_stats->bond_tx_mcast_dropped[i]);
+
+	len += scnprintf(buf + len, size - len, "\nbond_mcast2ucast_tried: ");
+	for (i = 0; i < MAX_TCL_RING; i++)
+		len += scnprintf(buf + len, size - len,	"%u:%u ",
+				i, soc_stats->bond_mcast2ucast_tried[i]);
+
+	len += scnprintf(buf + len, size - len, "\nbond_mcast2ucast_converted: ");
+	for (i = 0; i < MAX_TCL_RING; i++)
+		len += scnprintf(buf + len, size - len,	"%u:%u ",
+				i, soc_stats->bond_mcast2ucast_converted[i]);
+
+	len += scnprintf(buf + len, size - len,	"\nbond_mcast2ucast_drop: ");
+	for (i = 0; i < MAX_TCL_RING; i++)
+		len += scnprintf(buf + len, size - len,
+				"%u:%u ", i, soc_stats->bond_mcast2ucast_drop[i]);
+
 	len += scnprintf(buf + len, size - len,
 			 "\nag tx_pending: %u\n",
 			 atomic_read(&ab->ag->num_dp_tx_pending));
