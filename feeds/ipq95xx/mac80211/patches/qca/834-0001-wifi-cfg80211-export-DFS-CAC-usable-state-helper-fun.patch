From b54811f0c58e978aa7ec17e0efc93299b2b12c3e Mon Sep 17 00:00:00 2001
From: Aditya Kumar Singh <quic_adisi@quicinc.com>
Date: Thu, 14 Sep 2023 11:42:38 +0530
Subject: [PATCH 1/2] wifi: cfg80211: export DFS CAC usable state helper
 function

cfg80211 has cfg80211_chandef_dfs_usable() function to know whether at
least one channel in the chandef is in usable state or not.

Make the above function visible to drivers by exporting its symbol
to global list of kernel symbols.

Lower level drivers can make use of this function to be aware
if CAC is required on the given chandef. For example drivers which
maintains the CAC state internally can make use of this.

Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
---
 include/net/cfg80211.h | 13 +++++++++++++
 net/wireless/chan.c    |  1 +
 net/wireless/core.h    | 13 -------------
 3 files changed, 14 insertions(+), 13 deletions(-)

diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index 613ba16b9219..9dcb5487ea88 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -1070,6 +1070,19 @@ ieee80211_chandef_rate_flags(struct cfg80211_chan_def *chandef)
 	return ieee80211_chanwidth_rate_flags(chandef->width);
 }
 
+/**
+ * cfg80211_chandef_dfs_usable - checks if chandef is DFS usable
+ * @wiphy: the wiphy to validate against
+ * @chandef: the channel definition to check
+ *
+ * Checks if chandef is usable and we can/need start CAC on such channel.
+ *
+ * Return: true if all channels available and at least
+ *	   one channel requires CAC (NL80211_DFS_USABLE)
+ */
+bool cfg80211_chandef_dfs_usable(struct wiphy *wiphy,
+				 const struct cfg80211_chan_def *chandef);
+
 /**
  * cfg80211_chandef_dfs_cac_time - get maximum dfs cac time traversing
  * through the entire channel width
diff --git a/net/wireless/chan.c b/net/wireless/chan.c
index d048d1fd98ce..3ecc646d9d67 100644
--- a/net/wireless/chan.c
+++ b/net/wireless/chan.c
@@ -819,6 +819,7 @@ bool cfg80211_chandef_dfs_usable(struct wiphy *wiphy,
 
 	return (r1 + r2 > 0);
 }
+EXPORT_SYMBOL(cfg80211_chandef_dfs_usable);
 
 /*
  * Checks if center frequency of chan falls with in the bandwidth
diff --git a/net/wireless/core.h b/net/wireless/core.h
index d13eec4b87c0..72d8e4a6ccd5 100644
--- a/net/wireless/core.h
+++ b/net/wireless/core.h
@@ -461,19 +461,6 @@ int cfg80211_scan(struct cfg80211_registered_device *rdev);
 
 extern struct work_struct cfg80211_disconnect_work;
 
-/**
- * cfg80211_chandef_dfs_usable - checks if chandef is DFS usable
- * @wiphy: the wiphy to validate against
- * @chandef: the channel definition to check
- *
- * Checks if chandef is usable and we can/need start CAC on such channel.
- *
- * Return: true if all channels available and at least
- *	   one channel requires CAC (NL80211_DFS_USABLE)
- */
-bool cfg80211_chandef_dfs_usable(struct wiphy *wiphy,
-				 const struct cfg80211_chan_def *chandef);
-
 void cfg80211_set_dfs_state(struct wiphy *wiphy,
 			    const struct cfg80211_chan_def *chandef,
 			    enum nl80211_dfs_state dfs_state);
-- 
2.17.1

