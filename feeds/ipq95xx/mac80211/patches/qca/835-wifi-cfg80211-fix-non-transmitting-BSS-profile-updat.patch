From 537b8446e5d39d2b1fb2cc98da3de34f691e22cc Mon Sep 17 00:00:00 2001
From: Aditya Kumar Singh <quic_adisi@quicinc.com>
Date: Sat, 16 Sep 2023 14:04:23 +0530
Subject: [PATCH] wifi: cfg80211: fix non-transmitting BSS profile update via
 scan

Currently, when creating BSS profile for a non-transmitting profile in a
multiple BSSID set, all IEs that are present in its Non-Tx profile are
copied and rest all IEs from transmitting BSS are copied. But later,
when again transmitting profile BSS is found, it tries to update the
all other non-transmitted profile BSS via function
cfg80211_update_notlisted_nontrans().

In this function except for SSID IE and MBSSID IE from transmitting BSS,
rest all IEs are directly copied into non-transmitting BSS IEs which is
wrong. This leads to updating wrong info in non-transmitting BSS IEs.

In issue case, initially when non-transmitting BSS is formed, its Multi
Link Info IE is taken from its profile which is correct. But later, when
again transmitting beacon is found, it is updated with the Multi Link IE
of the transmitting profile. Due to this, the MLD address is modified
and this leads to association issue since now this non-transmitting BSS is
carrying the MLD address of its transmitting BSS which is wrong.

Fix this issue by not copying the IEs blindly from then transmitting BSS.
Instead use the same logic, as in during forming the BSS.

Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
---
 net/wireless/scan.c | 131 +++++++++++++++++++++++++++++---------------
 1 file changed, 88 insertions(+), 43 deletions(-)

diff --git a/net/wireless/scan.c b/net/wireless/scan.c
index 9e03cf326238..f405c30e856c 100644
--- a/net/wireless/scan.c
+++ b/net/wireless/scan.c
@@ -2282,72 +2282,116 @@ cfg80211_update_notlisted_nontrans(struct wiphy *wiphy,
 				   struct cfg80211_bss *nontrans_bss,
 				   struct ieee80211_mgmt *mgmt, size_t len)
 {
-	u8 *ie, *new_ie, *pos;
-	const struct element *nontrans_ssid;
-	const u8 *trans_ssid, *mbssid;
+	struct cfg80211_bss_ies *new_ies;
+	const struct element *elem, *sub;
+	const struct cfg80211_bss_ies *old;
+	const u8 *mbssid_index_ie;
+	const u8 *trans_bssid = mgmt->bssid;
 	size_t ielen = len - offsetof(struct ieee80211_mgmt,
 				      u.probe_resp.variable);
+	u8 nontrans_bssid[ETH_ALEN];
+	u8 *ie, *new_ie, *profile;
 	size_t new_ie_len;
-	struct cfg80211_bss_ies *new_ies;
-	const struct cfg80211_bss_ies *old;
-	size_t cpy_len;
+	bool found = false;
 
 	lockdep_assert_held(&wiphy_to_rdev(wiphy)->bss_lock);
 
 	ie = mgmt->u.probe_resp.variable;
 
-	new_ie_len = ielen;
-	trans_ssid = cfg80211_find_ie(WLAN_EID_SSID, ie, ielen);
-	if (!trans_ssid)
-		return;
-	new_ie_len -= trans_ssid[1];
-	mbssid = cfg80211_find_ie(WLAN_EID_MULTIPLE_BSSID, ie, ielen);
-	/*
-	 * It's not valid to have the MBSSID element before SSID
-	 * ignore if that happens - the code below assumes it is
-	 * after (while copying things inbetween).
-	 */
-	if (!mbssid || mbssid < trans_ssid)
+	new_ie = kzalloc(IEEE80211_MAX_DATA_LEN, GFP_ATOMIC);
+	if (!new_ie)
 		return;
-	new_ie_len -= mbssid[1];
 
-	nontrans_ssid = ieee80211_bss_get_elem(nontrans_bss, WLAN_EID_SSID);
-	if (!nontrans_ssid)
+	profile = kmalloc(ielen, GFP_ATOMIC);
+	if (!profile) {
+		kfree(new_ie);
 		return;
+	}
 
-	new_ie_len += nontrans_ssid->datalen;
+	/* parse the MBSSID IEs and find the profie we want to update */
+	for_each_element_id(elem, WLAN_EID_MULTIPLE_BSSID, ie, ielen) {
+		if (elem->datalen < 4)
+			continue;
+		if (elem->data[0] < 1 || (int)elem->data[0] > 8)
+			continue;
 
-	/* generate new ie for nontrans BSS
-	 * 1. replace SSID with nontrans BSS' SSID
-	 * 2. skip MBSSID IE
-	 */
-	new_ie = kzalloc(new_ie_len, GFP_ATOMIC);
-	if (!new_ie)
-		return;
+		for_each_element(sub, elem->data + 1, elem->datalen - 1) {
+			u8 profile_len;
+
+			if (sub->id != 0 || sub->datalen < 4) {
+				/* not a valid BSS profile */
+				continue;
+			}
+
+			if (sub->data[0] != WLAN_EID_NON_TX_BSSID_CAP ||
+			    sub->data[1] != 2) {
+				/* The first element within the Nontransmitted
+				 * BSSID Profile is not the Nontransmitted
+				 * BSSID Capability element.
+				 */
+				continue;
+			}
+
+			memset(profile, 0, ielen);
+			profile_len = cfg80211_merge_profile(ie, ielen,
+							     elem,
+							     sub,
+							     profile,
+							     ielen);
+
+			/* found a Nontransmitted BSSID Profile */
+			mbssid_index_ie = cfg80211_find_ie(WLAN_EID_MULTI_BSSID_IDX,
+							   profile, profile_len);
+
+			if (!mbssid_index_ie || mbssid_index_ie[1] < 1 ||
+			    mbssid_index_ie[2] == 0 ||
+			    mbssid_index_ie[2] > 46) {
+				/* No valid Multiple BSSID-Index element */
+				continue;
+			}
+
+			/* bssid_index should match or else this is not our
+			 * required non transmitting bss */
+			if (mbssid_index_ie[2] != nontrans_bss->bssid_index)
+				continue;
+
+			cfg80211_gen_new_bssid(trans_bssid,
+					       elem->data[0],
+					       mbssid_index_ie[2],
+					       nontrans_bssid);
+
+			/* compare bssid */
+			if (ether_addr_equal(nontrans_bssid, nontrans_bss->bssid))
+				continue;
+
+			new_ie_len = cfg80211_gen_new_ie(ie, ielen,
+							 profile,
+							 profile_len, new_ie,
+							 GFP_ATOMIC);
+			if (!new_ie_len)
+				continue;
+
+			found = true;
+			break;
+		}
+
+		if (found)
+			break;
+	}
+
+	if (!found)
+		goto out_free;
 
 	new_ies = kzalloc(sizeof(*new_ies) + new_ie_len, GFP_ATOMIC);
 	if (!new_ies)
 		goto out_free;
 
-	pos = new_ie;
-
-	/* copy the nontransmitted SSID */
-	cpy_len = nontrans_ssid->datalen + 2;
-	memcpy(pos, nontrans_ssid, cpy_len);
-	pos += cpy_len;
-	/* copy the IEs between SSID and MBSSID */
-	cpy_len = trans_ssid[1] + 2;
-	memcpy(pos, (trans_ssid + cpy_len), (mbssid - (trans_ssid + cpy_len)));
-	pos += (mbssid - (trans_ssid + cpy_len));
-	/* copy the IEs after MBSSID */
-	cpy_len = mbssid[1] + 2;
-	memcpy(pos, mbssid + cpy_len, ((ie + ielen) - (mbssid + cpy_len)));
-
 	/* update ie */
 	new_ies->len = new_ie_len;
 	new_ies->tsf = le64_to_cpu(mgmt->u.probe_resp.timestamp);
 	new_ies->from_beacon = ieee80211_is_beacon(mgmt->frame_control);
 	memcpy(new_ies->data, new_ie, new_ie_len);
+
 	if (ieee80211_is_probe_resp(mgmt->frame_control)) {
 		old = rcu_access_pointer(nontrans_bss->proberesp_ies);
 		rcu_assign_pointer(nontrans_bss->proberesp_ies, new_ies);
@@ -2363,6 +2407,7 @@ cfg80211_update_notlisted_nontrans(struct wiphy *wiphy,
 	}
 
 out_free:
+	kfree(profile);
 	kfree(new_ie);
 }
 
-- 
2.17.1

