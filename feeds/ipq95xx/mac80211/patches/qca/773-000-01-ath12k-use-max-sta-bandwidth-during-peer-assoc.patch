From 2253f41b57e3a74b0cedfaa4b2f3fa7124a09a86 Mon Sep 17 00:00:00 2001
From: Aditya Kumar Singh <quic_adisi@quicinc.com>
Date: Wed, 31 May 2023 20:48:47 +0530
Subject: [PATCH] ath12k: use max sta bandwidth during peer assoc

Currently, during peer assoc, host sets the bandwidth argument
based on the sta's current operating bandwidth. During bandwidth
upgrade, this leads to host sending peer phymode again along
with the bandwidth. In multi client cases, this can lead to firmware
buffer overflow.

However, if host sets the bandwidth argument based on sta's max bandwidth
then durong bandwidth upgrade, there is no need to send the phymode
again. This will help in optimizing the number of commands sent to
the firmware.

Modify the logic to take sta's max bandwidth into consideration while
forming the bandwodth argument.

Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -3390,7 +3390,7 @@ static bool ath12k_mac_sta_has_ofdm_only
 
 static enum wmi_phy_mode ath12k_mac_get_phymode_vht(struct ieee80211_link_sta *link_sta)
 {
-	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_160) {
+	if (link_sta->sta_max_bandwidth == IEEE80211_STA_RX_BW_160) {
 		switch (link_sta->vht_cap.cap &
 			IEEE80211_VHT_CAP_SUPP_CHAN_WIDTH_MASK) {
 		case IEEE80211_VHT_CAP_SUPP_CHAN_WIDTH_160MHZ:
@@ -3403,13 +3403,13 @@ static enum wmi_phy_mode ath12k_mac_get_
 		}
 	}
 
-	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_80)
+	if (link_sta->sta_max_bandwidth == IEEE80211_STA_RX_BW_80)
 		return MODE_11AC_VHT80;
 
-	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_40)
+	if (link_sta->sta_max_bandwidth == IEEE80211_STA_RX_BW_40)
 		return MODE_11AC_VHT40;
 
-	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_20)
+	if (link_sta->sta_max_bandwidth == IEEE80211_STA_RX_BW_20)
 		return MODE_11AC_VHT20;
 
 	return MODE_UNKNOWN;
@@ -3417,7 +3417,7 @@ static enum wmi_phy_mode ath12k_mac_get_
 
 static enum wmi_phy_mode ath12k_mac_get_phymode_he(struct ieee80211_link_sta *link_sta)
 {
-	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_160) {
+	if (link_sta->sta_max_bandwidth == IEEE80211_STA_RX_BW_160) {
 		if (link_sta->he_cap.he_cap_elem.phy_cap_info[0] &
 		     IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_160MHZ_IN_5G)
 			return MODE_11AX_HE160;
@@ -3428,13 +3428,13 @@ static enum wmi_phy_mode ath12k_mac_get_
 		return MODE_11AX_HE160;
 	}
 
-	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_80)
+	if (link_sta->sta_max_bandwidth == IEEE80211_STA_RX_BW_80)
 		return MODE_11AX_HE80;
 
-	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_40)
+	if (link_sta->sta_max_bandwidth == IEEE80211_STA_RX_BW_40)
 		return MODE_11AX_HE40;
 
-	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_20)
+	if (link_sta->sta_max_bandwidth == IEEE80211_STA_RX_BW_20)
 		return MODE_11AX_HE20;
 
 	return MODE_UNKNOWN;
@@ -3442,11 +3442,11 @@ static enum wmi_phy_mode ath12k_mac_get_
 
 static enum wmi_phy_mode ath12k_mac_get_phymode_eht(struct ieee80211_link_sta *link_sta)
 {
-	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_320)
+	if (link_sta->sta_max_bandwidth == IEEE80211_STA_RX_BW_320)
 		if (link_sta->eht_cap.eht_cap_elem.phy_cap_info[0] &
 		    IEEE80211_EHT_PHY_CAP0_320MHZ_IN_6GHZ)
 			return MODE_11BE_EHT320;
-	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_160) {
+	if (link_sta->sta_max_bandwidth == IEEE80211_STA_RX_BW_160) {
 		if (link_sta->he_cap.he_cap_elem.phy_cap_info[0] &
 		    IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_160MHZ_IN_5G)
 			return MODE_11BE_EHT160;
@@ -3457,13 +3457,13 @@ static enum wmi_phy_mode ath12k_mac_get_
 		return MODE_11BE_EHT160;
 	}
 
-	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_80)
+	if (link_sta->sta_max_bandwidth == IEEE80211_STA_RX_BW_80)
 		return MODE_11BE_EHT80;
 
-	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_40)
+	if (link_sta->sta_max_bandwidth == IEEE80211_STA_RX_BW_40)
 		return MODE_11BE_EHT40;
 
-	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_20)
+	if (link_sta->sta_max_bandwidth == IEEE80211_STA_RX_BW_20)
 		return MODE_11BE_EHT20;
 
 	return MODE_UNKNOWN;
@@ -3509,27 +3509,27 @@ static void ath12k_peer_assoc_h_phymode(
 	case NL80211_BAND_2GHZ:
 		if (link_sta->eht_cap.has_eht &&
 		    !ath12k_peer_assoc_h_eht_masked(eht_mcs_mask)) {
-			if (link_sta->bandwidth == IEEE80211_STA_RX_BW_40)
+			if (link_sta->sta_max_bandwidth == IEEE80211_STA_RX_BW_40)
 				phymode = MODE_11BE_EHT40_2G;
 			else
 				phymode = MODE_11BE_EHT20_2G;
 		} else if (link_sta->he_cap.has_he &&
 			   !ath12k_peer_assoc_h_he_masked(he_mcs_mask)) {
-			if (link_sta->bandwidth == IEEE80211_STA_RX_BW_80)
+			if (link_sta->sta_max_bandwidth == IEEE80211_STA_RX_BW_80)
 				phymode = MODE_11AX_HE80_2G;
-			else if (link_sta->bandwidth == IEEE80211_STA_RX_BW_40)
+			else if (link_sta->sta_max_bandwidth == IEEE80211_STA_RX_BW_40)
 				phymode = MODE_11AX_HE40_2G;
 			else
 				phymode = MODE_11AX_HE20_2G;
 		} else if (link_sta->vht_cap.vht_supported &&
 			   !ath12k_peer_assoc_h_vht_masked(vht_mcs_mask)) {
-			if (link_sta->bandwidth == IEEE80211_STA_RX_BW_40)
+			if (link_sta->sta_max_bandwidth == IEEE80211_STA_RX_BW_40)
 				phymode = MODE_11AC_VHT40;
 			else
 				phymode = MODE_11AC_VHT20;
 		} else if (link_sta->ht_cap.ht_supported &&
 			   !ath12k_peer_assoc_h_ht_masked(ht_mcs_mask)) {
-			if (link_sta->bandwidth == IEEE80211_STA_RX_BW_40)
+			if (link_sta->sta_max_bandwidth == IEEE80211_STA_RX_BW_40)
 				phymode = MODE_11NG_HT40;
 			else
 				phymode = MODE_11NG_HT20;
