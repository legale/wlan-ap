From 13e5eb33fe30e6d08d9167a180ed492f7489f569 Mon Sep 17 00:00:00 2001
From: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
Date: Tue, 17 Jan 2023 17:05:28 -0800
Subject: [PATCH 2/3] ath12k: add support for MLO SSR Mode0

When target asserts, firmware asserts all chips in MLO group.
Driver recovers all the chips by first cleaning the driver
context and finally calling iee80211_restart_hw to inform
mac80211 to reconfigure all the BSS information. This patch
assumes support from mac80211 for MLO target recovery.
currently supports only AP mode.

Co-Developed-by: Ramanathan Choodamani <quic_rchoodam@quicinc.com>
Signed-off-by: Ramanathan Choodamani <quic_rchoodam@quicinc.com>
Co-Developed-By: Sidhanta Sahu <quic_sidhanta@quicinc.com>
Signed-off-by: Sidhanta Sahu <quic_sidhanta@quicinc.com>
Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c     | 296 ++++++++++++++-------
 drivers/net/wireless/ath/ath12k/core.h     |  14 +-
 drivers/net/wireless/ath/ath12k/coredump.c |   1 +
 drivers/net/wireless/ath/ath12k/debugfs.c  |  52 +++-
 drivers/net/wireless/ath/ath12k/mac.c      |  25 +-
 drivers/net/wireless/ath/ath12k/mhi.c      |   4 +-
 drivers/net/wireless/ath/ath12k/qmi.c      |  36 ++-
 drivers/net/wireless/ath/ath12k/wmi.c      |  10 +-
 drivers/net/wireless/ath/ath12k/wmi.h      |   3 +-
 9 files changed, 309 insertions(+), 132 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/core.c b/drivers/net/wireless/ath/ath12k/core.c
index cd12abc..88de5ac 100644
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -43,6 +43,8 @@ static unsigned int ath12k_en_fwlog = true;
 module_param_named(en_fwlog, ath12k_en_fwlog, uint, 0644);
 MODULE_PARM_DESC(en_fwlog, "fwlog: 0-disable, 1-enable");
 
+static unsigned int ath12k_recovery_mode = ATH12K_MLO_RECOVERY_MODE0;
+
 static DEFINE_MUTEX(ath12k_hw_lock);
 static struct list_head ath12k_hw_groups = LIST_HEAD_INIT(ath12k_hw_groups);
 
@@ -132,6 +134,7 @@ ath12k_core_hw_group_alloc(u8 id, u8 max_chip)
 	ag->mlo_capable = !!ath12k_mlo_capable;
 	list_add(&ag->list, &ath12k_hw_groups);
 	mutex_init(&ag->mutex_lock);
+	ag->hw_queues_stopped = false;
 
 	return ag;
 }
@@ -957,10 +960,8 @@ static int ath12k_core_start(struct ath12k_base *ab,
 		goto err_reo_cleanup;
 	}
 
-	if (!test_bit(ATH12K_FLAG_RECOVERY, &ab->dev_flags)) {
-		/* Indicate the core start in the appropriate group */
-		ab->ag->num_started++;
- 	}
+	/* Indicate the core start in the appropriate group */
+	ab->ag->num_started++;
 
 	return 0;
 
@@ -1189,9 +1190,16 @@ static void ath12k_core_trigger_partner(struct ath12k_base *ab)
 		if (!partner_ab)
 			continue;
 
-		if (found)
-			ath12k_qmi_trigger_host_cap(partner_ab);
+		ath12k_dbg(ab, ATH12K_DBG_QMI, "QMI Trigger Host Cap AB:%p Partner AB:%p Found:%d Num Radios: %d ag->num_chip:%d\n",
+				ab, partner_ab, found,
+				ab->qmi.num_radios, ag->num_chip);
 
+		if (found) {
+			if (ath12k_recovery_mode == ATH12K_MLO_RECOVERY_MODE0 &&
+			    !test_bit(ATH12K_FLAG_QMI_HOST_CAP_SENT, &partner_ab->dev_flags)) {
+				ath12k_qmi_trigger_host_cap(partner_ab);
+			}
+		}
 		found = (partner_ab == ab) ? true : false;
 	}
 }
@@ -1310,8 +1318,6 @@ static int ath12k_core_reconfigure_on_crash(struct ath12k_base *ab)
 	if (ret)
 		goto err_hal_srng_deinit;
 
-	clear_bit(ATH12K_FLAG_RECOVERY, &ab->dev_flags);
-
 	return 0;
 
 err_hal_srng_deinit:
@@ -1319,106 +1325,101 @@ err_hal_srng_deinit:
 	return ret;
 }
 
-void ath12k_core_halt(struct ath12k *ar)
+static void ath12k_core_mlo_hw_queues_stop(struct ath12k_hw_group *ag)
 {
-	struct ath12k_base *ab = ar->ab;
+	struct ath12k_base *ab;
+	struct ath12k_hw *ah;
+	int i;
 
-	lockdep_assert_held(&ar->conf_mutex);
+	lockdep_assert_held(&ag->mutex_lock);
 
-	ar->num_created_vdevs = 0;
-	ar->allocated_vdev_map = 0;
+	for (i = 0; i < ag->num_hw; i++) {
+		ah = ag->ah[i];
+		if (!ah)
+			continue;
 
-	ath12k_mac_scan_finish(ar);
-	ath12k_mac_peer_cleanup_all(ar);
-	cancel_delayed_work_sync(&ar->scan.timeout);
-	cancel_work_sync(&ar->regd_update_work);
+		ieee80211_stop_queues(ah->hw);
+	}
+	ag->hw_queues_stopped = true;
 
-	rcu_assign_pointer(ab->pdevs_active[ar->pdev_idx], NULL);
-	synchronize_rcu();
-	INIT_LIST_HEAD(&ar->arvifs);
-	idr_init(&ar->txmgmt_idr);
+	for (i = 0; i < ag->num_chip; i++) {
+		ab = ag->ab[i];
+
+		/*
+		* In Mode0, partner chips are expected to be asserted, hence reset
+		* qmi.num_radios count to ensure avoiding duplicate host cap triggers.
+		*/
+		if (ath12k_recovery_mode == ATH12K_MLO_RECOVERY_MODE0) {
+			ab->qmi.num_radios = ATH12K_QMI_INVALID_RADIO;
+			clear_bit(ATH12K_FLAG_QMI_HOST_CAP_SENT, &ab->dev_flags);
+		}
+	}
 }
 
-static void ath12k_core_restart(struct work_struct *work)
+static void ath12k_core_pre_reconfigure_recovery(struct ath12k_base *ab)
 {
-	struct ath12k_base *ab = container_of(work, struct ath12k_base, restart_work);
-	struct ath12k_hw_group *ag = ab->ag;
-	int ret;
 	struct ath12k *ar;
 	struct ath12k_pdev *pdev;
 	struct ath12k_link_vif *arvif;
-	struct ath12k_hw *ah;
-	int i, j;
+	int i;
 
 	spin_lock_bh(&ab->base_lock);
 	ab->stats.fw_crash_counter++;
 	spin_unlock_bh(&ab->base_lock);
 
-	for (i = 0; i < ag->num_hw; i++) {
-		ah = ag->ah[i];
-		if (!ah)
+	for (i = 0; i < ab->num_radios; i++) {
+		pdev = &ab->pdevs[i];
+		ar = pdev->ar;
+		if (!ar || ar->state == ATH12K_STATE_OFF)
 			continue;
 
-		ieee80211_stop_queues(ah->hw);
-	}
-
-	for (i = 0; i < ag->num_chip; i++) {
-		ab = ag->ab[i];
+		list_for_each_entry(arvif, &ar->arvifs, list)
+			if (arvif->is_started)
+				ath12k_debugfs_remove_interface(arvif);
 
-		for (j = 0; j < ab->num_radios; j++) {
-			pdev = &ab->pdevs[j];
-			ar = pdev->ar;
-			if (!ar || ar->state == ATH12K_STATE_OFF)
-				continue;
+		ath12k_mac_drain_tx(ar);
+		complete(&ar->scan.started);
+		complete(&ar->scan.completed);
+		complete(&ar->peer_assoc_done);
+		complete(&ar->peer_delete_done);
+		complete(&ar->install_key_done);
+		complete(&ar->vdev_setup_done);
+		complete(&ar->vdev_delete_done);
+		complete(&ar->bss_survey_done);
+		complete(&ar->thermal.wmi_sync);
 
-			list_for_each_entry(arvif, &ar->arvifs, list) {
-				if (arvif->is_started) {
-					ath12k_debugfs_remove_interface(arvif);
-				}
-			}
+		wake_up(&ar->dp.tx_empty_waitq);
+		idr_for_each(&ar->txmgmt_idr,
+			     ath12k_mac_tx_mgmt_pending_free, ar);
+		idr_destroy(&ar->txmgmt_idr);
+		wake_up(&ar->txmgmt_empty_waitq);
 
-			ath12k_mac_drain_tx(ar);
-			complete(&ar->scan.started);
-			complete(&ar->scan.completed);
-			complete(&ar->peer_assoc_done);
-			complete(&ar->peer_delete_done);
-			complete(&ar->install_key_done);
-			complete(&ar->vdev_setup_done);
-			complete(&ar->vdev_delete_done);
-			complete(&ar->bss_survey_done);
-			complete(&ar->thermal.wmi_sync);
-
-			wake_up(&ar->dp.tx_empty_waitq);
-			idr_for_each(&ar->txmgmt_idr,
-				     ath12k_mac_tx_mgmt_pending_free, ar);
-			idr_destroy(&ar->txmgmt_idr);
-			wake_up(&ar->txmgmt_empty_waitq);
-
-			ar->monitor_vdev_id = -1;
-			clear_bit(MONITOR_VDEV_STARTED, &ar->monitor_flags);
-			clear_bit(MONITOR_VDEV_CREATED, &ar->monitor_flags);
-		}
+		ar->monitor_vdev_id = -1;
+		clear_bit(MONITOR_VDEV_STARTED, &ar->monitor_flags);
+		clear_bit(MONITOR_VDEV_CREATED, &ar->monitor_flags);
+	}
 
-		wake_up(&ab->wmi_ab.tx_credits_wq);
-		wake_up(&ab->peer_mapping_wq);
+	wake_up(&ab->wmi_ab.tx_credits_wq);
+	wake_up(&ab->peer_mapping_wq);
 
+}
 
-		ret = ath12k_core_reconfigure_on_crash(ab);
-		if (ret) {
-			ath12k_err(ab, "failed to reconfigure driver on crash recovery\n");
-			return;
-		}
+static void ath12k_core_post_reconfigure_recovery(struct ath12k_base *ab)
+{
+	struct ath12k *ar;
+	struct ath12k_pdev *pdev;
+	int i;
 
-		for (j = 0; j < ab->num_radios; j++) {
-			pdev = &ab->pdevs[j];
-			ar = pdev->ar;
-			if (!ar || ar->state == ATH12K_STATE_OFF ||
-				ar->state == ATH12K_STATE_TM)
-				continue;
+	for (i = 0; i < ab->num_radios; i++) {
+		pdev = &ab->pdevs[i];
+		ar = pdev->ar;
+		if (!ar || ar->state == ATH12K_STATE_OFF ||
+		    ar->state == ATH12K_STATE_TM)
+			continue;
 
-			mutex_lock(&ar->conf_mutex);
+		mutex_lock(&ar->conf_mutex);
 
-			switch (ar->state) {
+		switch (ar->state) {
 			case ATH12K_STATE_ON:
 				ar->state = ATH12K_STATE_RESTARTING;
 				ath12k_core_halt(ar);
@@ -1426,50 +1427,108 @@ static void ath12k_core_restart(struct work_struct *work)
 			case ATH12K_STATE_OFF:
 				ath12k_warn(ab,
 					    "cannot restart radio %d that hasn't been started\n",
-					    j);
+					    i);
 				break;
 			case ATH12K_STATE_RESTARTING:
+				ar->state = ATH12K_STATE_RESTARTED;
 				break;
 			case ATH12K_STATE_RESTARTED:
 				ar->state = ATH12K_STATE_WEDGED;
 				fallthrough;
 			case ATH12K_STATE_WEDGED:
 				ath12k_warn(ab,
-					    "device is wedged, will not restart radio %d\n", j);
+					    "device is wedged, will not restart radio %d\n", i);
 				break;
 			case ATH12K_STATE_TM:
-				ath12k_warn(ab, "fw mode reset done radio %d\n", j);
+				ath12k_warn(ab, "fw mode reset done radio %d\n", i);
 				break;
-			}
-			mutex_unlock(&ar->conf_mutex);
 		}
+		mutex_unlock(&ar->conf_mutex);
+	}
+}
 
-		if (ab->is_reset) {
-			atomic_dec(&ab->reset_count);
-			complete(&ab->reset_complete);
-			ab->is_reset = false;
-		}
+void ath12k_core_halt(struct ath12k *ar)
+{
+	struct ath12k_base *ab = ar->ab;
+
+	lockdep_assert_held(&ar->conf_mutex);
+
+	ar->num_created_vdevs = 0;
+	ar->allocated_vdev_map = 0;
+
+	ath12k_mac_scan_finish(ar);
+	ath12k_mac_peer_cleanup_all(ar);
+	cancel_delayed_work_sync(&ar->scan.timeout);
+	cancel_work_sync(&ar->regd_update_work);
+	rcu_assign_pointer(ab->pdevs_active[ar->pdev_idx], NULL);
+	synchronize_rcu();
+	INIT_LIST_HEAD(&ar->arvifs);
+	idr_init(&ar->txmgmt_idr);
+}
+
+static void ath12k_core_restart(struct work_struct *work)
+{
+	struct ath12k_base *ab = container_of(work, struct ath12k_base, restart_work);
+	struct ath12k_hw_group *ag = ab->ag;
+	int ret;
+	struct ath12k_hw *ah;
+	int i;
+
+	if (!ab->is_reset)
+		ath12k_core_pre_reconfigure_recovery(ab);
 
-		complete(&ab->driver_recovery);
+	ret = ath12k_core_reconfigure_on_crash(ab);
+	if (ret) {
+		ath12k_err(ab, "failed to reconfigure driver on crash recovery\n");
+		return;
 	}
 
-	for (i = 0; i < ag->num_hw; i++) {
-		ah = ag->ah[i];
-		if (!ah)
-			continue;
+	if (!ab->is_reset)
+		ath12k_core_post_reconfigure_recovery(ab);
+
+	if (ath12k_core_hw_group_start_ready(ag) &&
+	    ath12k_recovery_mode == ATH12K_MLO_RECOVERY_MODE0) {
+		for (i = 0; i < ag->num_hw; i++) {
+			ah = ag->ah[i];
+			if (!ah)
+				continue;
 
-		mutex_lock(&ah->conf_mutex);
-		ieee80211_restart_hw(ah->hw);
-		mutex_unlock(&ah->conf_mutex);
+			mutex_lock(&ah->conf_mutex);
+			ieee80211_restart_hw(ah->hw);
+			mutex_unlock(&ah->conf_mutex);
+		}
 	}
+
 }
 
 static void ath12k_core_reset(struct work_struct *work)
 {
 	struct ath12k_base *ab = container_of(work, struct ath12k_base, reset_work);
-	int reset_count;
+	struct ath12k_hw_group *ag = ab->ag;
+	struct ath12k_base *partner_ab;
+	int reset_count, fail_cont_count, i;
 	long time_left;
 
+	/* Sometimes the recovery will fail and then the next all recovery fail,
+	 * this is to avoid infinite recovery since it can not recovery success.
+	 */
+	fail_cont_count = atomic_read(&ab->fail_cont_count);
+
+	if (fail_cont_count >= ATH12K_RESET_MAX_FAIL_COUNT_FINAL) {
+		ath12k_warn(ab, "Recovery Failed, Fail count:%d MAX_FAIL_COUNT final:%d\n",
+				fail_cont_count,
+				ATH12K_RESET_MAX_FAIL_COUNT_FINAL);
+		return;
+	}
+
+	if (fail_cont_count >= ATH12K_RESET_MAX_FAIL_COUNT_FIRST &&
+	    time_before(jiffies, ab->reset_fail_timeout)) {
+		ath12k_warn(ab, "Recovery Failed, Fail count:%d MAX_FAIL_COUNT first:%d\n",
+				fail_cont_count,
+				ATH12K_RESET_MAX_FAIL_COUNT_FIRST);
+		return;
+	}
+
 	reset_count = atomic_inc_return(&ab->reset_count);
 
 	if (reset_count > 1) {
@@ -1488,11 +1547,45 @@ static void ath12k_core_reset(struct work_struct *work)
 			return;
 		}
 
+		ab->reset_fail_timeout = jiffies + ATH12K_RESET_FAIL_TIMEOUT_HZ;
+		/* Record the continuous recovery fail count when recovery failed*/
+		atomic_inc(&ab->fail_cont_count);
 	}
 
 	ath12k_dbg(ab, ATH12K_DBG_BOOT, "reset starting\n");
+	ab->recovery_start_time = jiffies;
 
+	mutex_lock(&ag->mutex_lock);
 	ab->is_reset = true;
+	atomic_set(&ab->recovery_count, 0);
+
+	for (i = 0; i < ag->num_chip; i++) {
+		partner_ab = ag->ab[i];
+		if (ab == partner_ab)
+			continue;
+
+		/* issue FW Hang command on partner chips for Mode0. This is a fool proof
+		 * method to ensure recovery of all partner chips in MODE0 instead of
+		 * relying on firmware to crash partner chips
+		 */
+		if (ath12k_recovery_mode == ATH12K_MLO_RECOVERY_MODE0 &&
+		    !test_bit(ATH12K_FLAG_RECOVERY, &partner_ab->dev_flags))
+			ath12k_wmi_force_fw_hang_cmd(partner_ab->pdevs[0].ar,
+						     ATH12K_WMI_FW_HANG_ASSERT_TYPE,
+						     ATH12K_WMI_FW_HANG_DELAY, true);
+	}
+
+	/* Incase recovery fails and FW asserts again, this is to prevent invalid operation. */
+	if (ag->num_started && ab->fw_recovery_support)
+		ag->num_started--;
+
+	if (!ag->hw_queues_stopped)
+		ath12k_core_mlo_hw_queues_stop(ag);
+
+	ath12k_core_pre_reconfigure_recovery(ab);
+
+	ath12k_core_post_reconfigure_recovery(ab);
+
 	/* reset host fixed mem off to zero */
 	ab->host_ddr_fixed_mem_off = 0;
 	/* prepare coredump */
@@ -1504,6 +1597,7 @@ static void ath12k_core_reset(struct work_struct *work)
 
 		ath12k_dbg(ab, ATH12K_DBG_BOOT, "reset started\n");
 	}
+	mutex_unlock(&ag->mutex_lock);
 }
 
 int ath12k_core_pre_init(struct ath12k_base *ab)
@@ -1746,8 +1840,6 @@ struct ath12k_base *ath12k_core_alloc(struct device *dev, size_t priv_size,
 	if (!ab)
 		return NULL;
 
-	init_completion(&ab->driver_recovery);
-
 	ab->workqueue = create_singlethread_workqueue("ath12k_wq");
 	if (!ab->workqueue)
 		goto err_sc_free;
diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index f2ebae0..c5dcdc8 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -42,7 +42,7 @@
 extern unsigned int ath12k_frame_mode;
 
 #define ATH12K_MON_TIMER_INTERVAL  10
-#define ATH12K_RESET_TIMEOUT_HZ			(20 * HZ)
+#define ATH12K_RESET_TIMEOUT_HZ			(180 * HZ)
 #define ATH12K_RESET_MAX_FAIL_COUNT_FIRST	3
 #define ATH12K_RESET_MAX_FAIL_COUNT_FINAL	5
 #define ATH12K_RESET_FAIL_TIMEOUT_HZ		(20 * HZ)
@@ -226,6 +226,7 @@ enum ath12k_dev_flags {
 	ATH12K_FLAG_QMI_FAIL,
 	ATH12K_FLAG_HTC_SUSPEND_COMPLETE,
 	ATH12K_FLAG_QMI_FW_READY_COMPLETE,
+	ATH12K_FLAG_QMI_HOST_CAP_SENT,
 	ATH12K_FLAG_HW_GROUP_ATTACHED,
 	ATH12K_FLAG_FTM_SEGMENTED,
 };
@@ -1042,6 +1043,10 @@ struct ath12k_mlo_memory {
 	bool init_done;
 };
 
+enum ath12k_mlo_recovery_mode {
+	ATH12K_MLO_RECOVERY_MODE0,
+};
+
 /* Holds info on the group of SOCs that are registered as a single wiphy
  * or single SOC where each radio registered as separate wiphy in non-MLO
  */
@@ -1054,6 +1059,7 @@ struct ath12k_hw_group {
 	u8 num_started;
 	u8 num_hw;
 	bool mlo_capable;
+	bool hw_queues_stopped;
 	unsigned long dev_flags;
 	struct ath12k_hw *ah[ATH12K_GROUP_MAX_RADIO];
 	struct ath12k_base *ab[ATH12K_MAX_SOCS];
@@ -1150,13 +1156,19 @@ struct ath12k_base {
 	struct work_struct restart_work;
 	struct workqueue_struct *workqueue_aux;
 	struct work_struct reset_work;
+	atomic_t recovery_count;
 	atomic_t reset_count;
 	bool is_reset;
 	struct completion reset_complete;
+	struct completion reconfigure_complete;
 	unsigned long reset_fail_timeout;
+        /* continuous recovery fail count */
+        atomic_t fail_cont_count;
+	u32 recovery_start_time;
 	struct {
 		/* protected by data_lock */
 		u32 fw_crash_counter;
+		u32 last_recovery_time;
 	} stats;
 	bool ftm_segment_handler;
 	struct ath12k_ftm_event_obj ftm_event_obj;
diff --git a/drivers/net/wireless/ath/ath12k/coredump.c b/drivers/net/wireless/ath/ath12k/coredump.c
index e2b6683..3096d9b 100644
--- a/drivers/net/wireless/ath/ath12k/coredump.c
+++ b/drivers/net/wireless/ath/ath12k/coredump.c
@@ -327,6 +327,7 @@ void ath12k_coredump_download_rddm(struct ath12k_base *ab)
 				    atomic_read(&ath12k_coredump_ram_info.num_chip));
 	} else {
 		/* TODO dump collection for MLO when fw_recovery set */
+		ath12k_info(ab, "WLAN target is restarting");
 		ath12k_coredump_build_inline(ab, segment, num_seg);
 		vfree(segment);
 	}
diff --git a/drivers/net/wireless/ath/ath12k/debugfs.c b/drivers/net/wireless/ath/ath12k/debugfs.c
index 437a711..e9c66a9 100644
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -443,6 +443,40 @@ static const struct file_operations fops_vdev_stats_offload = {
 	.open = simple_open
 };
 
+static ssize_t ath12k_debug_fw_reset_stats_read(struct file *file,
+						char __user *user_buf,
+						size_t count, loff_t *ppos)
+{
+	struct ath12k_base *ab = file->private_data;
+	int ret;
+	size_t len = 0, buf_len = 500;
+	char *buf;
+
+	buf = kmalloc(buf_len, GFP_KERNEL);
+	if (!buf)
+		return -ENOMEM;
+
+	spin_lock_bh(&ab->base_lock);
+	len += scnprintf(buf + len, buf_len - len,
+			 "fw_crash_counter\t\t%d\n", ab->stats.fw_crash_counter);
+	len += scnprintf(buf + len, buf_len - len,
+			 "last_recovery_time\t\t%d\n", ab->stats.last_recovery_time);
+	spin_unlock_bh(&ab->base_lock);
+
+	ret = simple_read_from_buffer(user_buf, count, ppos, buf, len);
+
+	kfree(buf);
+
+	return ret;
+}
+
+static const struct file_operations fops_fw_reset_stats = {
+	.open = simple_open,
+	.read = ath12k_debug_fw_reset_stats_read,
+	.owner = THIS_MODULE,
+	.llseek = default_llseek,
+};
+
 static ssize_t ath12k_read_simulate_fw_crash(struct file *file,
 					     char __user *user_buf,
 					     size_t count, loff_t *ppos)
@@ -502,7 +536,7 @@ static ssize_t ath12k_write_simulate_fw_crash(struct file *file,
 		ath12k_info(ab, "simulating firmware assert crash\n");
 		ret = ath12k_wmi_force_fw_hang_cmd(ar,
 						   ATH12K_WMI_FW_HANG_ASSERT_TYPE,
-						   ATH12K_WMI_FW_HANG_DELAY);
+						   ATH12K_WMI_FW_HANG_DELAY, false);
 	} else {
 		ret = -EINVAL;
 		goto exit;
@@ -913,8 +947,10 @@ static ssize_t ath12k_debug_write_fw_recovery(struct file *file,
 					      size_t count, loff_t *ppos)
 {
 	struct ath12k_base *ab = file->private_data;
+	struct ath12k_hw_group *ag;
 	unsigned int value;
 	int ret;
+	int i;
 
 	if (kstrtouint_from_user(user_buf, count, 0, &value))
 	         return -EINVAL;
@@ -927,7 +963,16 @@ static ssize_t ath12k_debug_write_fw_recovery(struct file *file,
 	         goto exit;
 	}
 
-	ab->fw_recovery_support = value ? true : false;
+	ag = ab->ag;
+	if (ag->mlo_capable) {
+		for (i = 0; i < ag->num_chip; i++) {
+			ab = ag->ab[i];
+			mutex_lock(&ab->core_lock);
+			ab->fw_recovery_support = value ? true : false;
+			mutex_unlock(&ab->core_lock);
+		}
+	} else
+		ab->fw_recovery_support = value ? true : false;
 
 	ret = count;
 
@@ -1209,6 +1254,9 @@ int ath12k_debugfs_pdev_create(struct ath12k_base *ab)
 	debugfs_create_file("rx_hash_ix3", 0600, ab->debugfs_soc, ab,
 			    &fops_soc_rx_hash_ix3);
 
+	debugfs_create_file("fw_reset_stats", 0400, ab->debugfs_soc, ab,
+			    &fops_fw_reset_stats);
+
 	return 0;
 }
 
diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index 6d3556d..0155fab 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -12791,7 +12791,7 @@ ath12k_mac_op_reconfig_complete(struct ieee80211_hw *hw,
 {
 	struct ath12k_hw *ah = hw->priv;
 	struct ath12k *ar;
-	u8 restart_count = 0;
+	u8 restart_count = 0, recovery_count;
 	int i;
 
 	if (reconfig_type != IEEE80211_RECONFIG_TYPE_RESTART)
@@ -12811,6 +12811,28 @@ ath12k_mac_op_reconfig_complete(struct ieee80211_hw *hw,
 			restart_count++;
 		}
 
+		if (ar->ab->is_reset) {
+			recovery_count = atomic_inc_return(&ar->ab->recovery_count);
+			ath12k_dbg(ar->ab, ATH12K_DBG_BOOT,
+				   "recovery count %d\n", recovery_count);
+			/* When there are multiple radios in an SOC,
+			 * the recovery has to be done for each radio
+			 */
+			if (recovery_count == ar->ab->num_radios) {
+				atomic_dec(&ar->ab->reset_count);
+				complete(&ar->ab->reset_complete);
+				ar->ab->is_reset = false;
+				atomic_set(&ar->ab->fail_cont_count, 0);
+				clear_bit(ATH12K_FLAG_RECOVERY, &ar->ab->dev_flags);
+				spin_lock_bh(&ar->ab->base_lock);
+				ar->ab->stats.last_recovery_time =
+					jiffies_to_msecs(jiffies -
+							ar->ab->recovery_start_time);
+				spin_unlock_bh(&ar->ab->base_lock);
+				ath12k_dbg(ar->ab, ATH12K_DBG_BOOT, "reset success\n");
+			}
+		}
+
 		mutex_unlock(&ar->conf_mutex);
 		ar++;
 	}
@@ -12819,6 +12841,7 @@ ath12k_mac_op_reconfig_complete(struct ieee80211_hw *hw,
 		ieee80211_wake_queues(ah->hw);
 
 	mutex_unlock(&ah->conf_mutex);
+	ah->ag->hw_queues_stopped = false;
 }
 
 static void
diff --git a/drivers/net/wireless/ath/ath12k/mhi.c b/drivers/net/wireless/ath/ath12k/mhi.c
index 0c369f8..e4895e2 100644
--- a/drivers/net/wireless/ath/ath12k/mhi.c
+++ b/drivers/net/wireless/ath/ath12k/mhi.c
@@ -330,8 +330,10 @@ static void ath12k_mhi_op_status_cb(struct mhi_controller *mhi_cntrl,
 		ath12k_warn(ab, "firmware crashed: MHI_CB_SYS_ERROR\n");
 		break;
 	case MHI_CB_EE_RDDM:
-		if (!(test_bit(ATH12K_FLAG_UNREGISTERING, &ab->ag->dev_flags)))
+		if (!(test_bit(ATH12K_FLAG_UNREGISTERING, &ab->ag->dev_flags))) {
+			set_bit(ATH12K_FLAG_RECOVERY, &ab->dev_flags);
 			queue_work(ab->workqueue_aux, &ab->reset_work);
+		}
 		ath12k_hal_dump_srng_stats(ab);
 		break;
 	default:
diff --git a/drivers/net/wireless/ath/ath12k/qmi.c b/drivers/net/wireless/ath/ath12k/qmi.c
index e2e1b2c..1b978d8 100644
--- a/drivers/net/wireless/ath/ath12k/qmi.c
+++ b/drivers/net/wireless/ath/ath12k/qmi.c
@@ -3237,12 +3237,9 @@ static void ath12k_qmi_free_mlo_mem_chunk(struct ath12k_base *ab,
 
 	lockdep_assert_held(&ag->mutex_lock);
 
-	if (!ag->mlo_mem.init_done)
+	if (!ag->mlo_mem.init_done || ag->num_started)
 		return;
 
-	if (ag->num_started)
-		goto out;
-
 	if (idx >= ARRAY_SIZE(ag->mlo_mem.chunk)) {
 		ath12k_warn(ab, "invalid idx %d for MLO memory chunk free\n", idx);
 		return;
@@ -3268,7 +3265,6 @@ static void ath12k_qmi_free_mlo_mem_chunk(struct ath12k_base *ab,
 	mlo_chunk->paddr = NULL;
 	mlo_chunk->size = 0;
 
-out:
 	if (fixed_mem)
 		chunk->v.ioaddr = NULL;
 	else
@@ -4413,10 +4409,10 @@ static bool ath12k_qmi_hw_group_host_cap_ready(struct ath12k_hw_group *ag)
 	return true;
 }
 
-static struct ath12k_base *
-ath12k_qmi_hw_group_find_blocked_chip(struct ath12k_hw_group *ag)
+static int 
+ath12k_qmi_hw_grp_find_blocked_chip_n_send_host_cap(struct ath12k_hw_group *ag)
 {
-	struct ath12k_base *ab;
+	struct ath12k_base *blocked_ab;
 	struct ath12k_qmi *qmi;
 	bool block;
 	int i;
@@ -4424,26 +4420,28 @@ ath12k_qmi_hw_group_find_blocked_chip(struct ath12k_hw_group *ag)
 	lockdep_assert_held(&ag->mutex_lock);
 
 	for (i = 0; i < ag->num_chip; i++) {
-		ab = ag->ab[i];
-		if (!ab)
+		blocked_ab = ag->ab[i];
+
+		if (!blocked_ab)
 			continue;
 
-		qmi = &ab->qmi;
+		qmi = &blocked_ab->qmi;
 
 		spin_lock(&qmi->event_lock);
 		block = ath12k_qmi_get_event_block(qmi);
 		spin_unlock(&qmi->event_lock);
 
-		if (block)
-			return ab;
+		if (block) {
+			ath12k_qmi_trigger_host_cap(blocked_ab);
+		}
 	}
 
-	return NULL;
+	return 0;
 }
 
 static int ath12k_qmi_event_server_arrive(struct ath12k_qmi *qmi)
 {
-	struct ath12k_base *ab = qmi->ab, *block_ab;
+	struct ath12k_base *ab = qmi->ab;
 	struct ath12k_hw_group *ag = ab->ag;
 	bool host_cap_ready;
 	int ret;
@@ -4455,7 +4453,6 @@ static int ath12k_qmi_event_server_arrive(struct ath12k_qmi *qmi)
 	}
 
 	ath12k_qmi_phy_cap_send(ab);
-
 	if (ath12k_cold_boot_cal && ab->qmi.cal_done == 0 &&
 			ab->hw_params->cold_boot_calib &&
 			ab->qmi.cal_timeout == 0) {
@@ -4469,9 +4466,7 @@ static int ath12k_qmi_event_server_arrive(struct ath12k_qmi *qmi)
 		mutex_lock(&ag->mutex_lock);
 		host_cap_ready = ath12k_qmi_hw_group_host_cap_ready(ag);
 		if (host_cap_ready) {
-			block_ab = ath12k_qmi_hw_group_find_blocked_chip(ag);
-			if (block_ab)
-				ath12k_qmi_trigger_host_cap(block_ab);
+			ret = ath12k_qmi_hw_grp_find_blocked_chip_n_send_host_cap(ag);
 		}
 		mutex_unlock(&ag->mutex_lock);
 	}
@@ -4486,9 +4481,11 @@ static int ath12k_qmi_event_host_cap(struct ath12k_qmi *qmi)
 
 	ret = ath12k_qmi_host_cap_send(ab);
 	if (ret < 0) {
+		clear_bit(ATH12K_FLAG_QMI_HOST_CAP_SENT, &ab->dev_flags);
 		ath12k_warn(ab, "qmi failed to send host cap QMI:%d\n", ret);
 		return ret;
 	}
+	set_bit(ATH12K_FLAG_QMI_HOST_CAP_SENT, &ab->dev_flags);
 
 	return ret;
 }
@@ -5091,7 +5088,6 @@ static void ath12k_qmi_driver_event_work(struct work_struct *work)
 			break;
 		case ATH12K_QMI_EVENT_SERVER_EXIT:
 			set_bit(ATH12K_FLAG_CRASH_FLUSH, &ab->dev_flags);
-			set_bit(ATH12K_FLAG_RECOVERY, &ab->dev_flags);
 			break;
 		case ATH12K_QMI_EVENT_REQUEST_MEM:
 			ret = ath12k_qmi_event_mem_request(qmi);
diff --git a/drivers/net/wireless/ath/ath12k/wmi.c b/drivers/net/wireless/ath/ath12k/wmi.c
index 721f7d2..475e6d1 100644
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -1745,12 +1745,12 @@ int ath12k_wmi_set_sta_ps_param(struct ath12k *ar, u32 vdev_id,
 	return ret;
 }
 
-int ath12k_wmi_force_fw_hang_cmd(struct ath12k *ar, u32 type, u32 delay_time_ms)
+int ath12k_wmi_force_fw_hang_cmd(struct ath12k *ar, u32 type, u32 delay_time_ms, bool nowait)
 {
 	struct ath12k_pdev_wmi *wmi = ar->wmi;
 	struct wmi_force_fw_hang_cmd *cmd;
 	struct sk_buff *skb;
-	int ret, len;
+	int ret = 0, len;
 
 	len = sizeof(*cmd);
 
@@ -1765,8 +1765,10 @@ int ath12k_wmi_force_fw_hang_cmd(struct ath12k *ar, u32 type, u32 delay_time_ms)
 	cmd->type = cpu_to_le32(type);
 	cmd->delay_time_ms = cpu_to_le32(delay_time_ms);
 
-	ret = ath12k_wmi_cmd_send(wmi, skb, WMI_FORCE_FW_HANG_CMDID);
-
+	if (nowait)
+		ath12k_wmi_cmd_send_nowait(wmi, skb, WMI_FORCE_FW_HANG_CMDID);
+	else
+		ret = ath12k_wmi_cmd_send(wmi, skb, WMI_FORCE_FW_HANG_CMDID);
 	if (ret) {
 		ath12k_warn(ar->ab, "Failed to send WMI_FORCE_FW_HANG_CMDID");
 		dev_kfree_skb(skb);
diff --git a/drivers/net/wireless/ath/ath12k/wmi.h b/drivers/net/wireless/ath/ath12k/wmi.h
index 773f7ff..f2046b8 100644
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -6681,7 +6681,8 @@ int ath12k_wmi_vdev_set_param_cmd(struct ath12k *ar, u32 vdev_id,
 
 int ath12k_wmi_set_sta_ps_param(struct ath12k *ar, u32 vdev_id,
 				u32 param, u32 param_value);
-int ath12k_wmi_force_fw_hang_cmd(struct ath12k *ar, u32 type, u32 delay_time_ms);
+int ath12k_wmi_force_fw_hang_cmd(struct ath12k *ar, u32 type, u32 delay_time_ms,
+				 bool nowait);
 int ath12k_wmi_send_peer_delete_cmd(struct ath12k *ar,
 				    const u8 *peer_addr, u8 vdev_id);
 int ath12k_wmi_vdev_delete(struct ath12k *ar, u8 vdev_id);
-- 
2.17.1

