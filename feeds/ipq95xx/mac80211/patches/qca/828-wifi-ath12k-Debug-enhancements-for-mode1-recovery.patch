From cdacbf02c7dc1f38fd44931178bb01f01afd4980 Mon Sep 17 00:00:00 2001
From: Manish Dharanenthiran <quic_mdharane@quicinc.com>
Date: Fri, 25 Aug 2023 21:39:57 +0530
Subject: [PATCH] wifi: ath12k: Debug enhancements for mode1 recovery

This patch adds changes for the following,
 1) Info debugs to update whenever a fallback has happened
    from mode1 to mode0.
 2) debugfs value will display with what user has configured.

Signed-off-by: Manish Dharanenthiran <quic_mdharane@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c    | 12 +++++++-----
 drivers/net/wireless/ath/ath12k/core.h    |  3 ++-
 drivers/net/wireless/ath/ath12k/debugfs.c | 15 ++++++++-------
 3 files changed, 17 insertions(+), 13 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/core.c b/drivers/net/wireless/ath/ath12k/core.c
index bb34104..99740d4 100644
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -3018,12 +3018,12 @@ static void ath12k_core_reset(struct work_struct *work)
 			default:
 				ag->recovery_mode = ATH12K_MLO_RECOVERY_MODE0;
 		}
-		ath12k_dbg(ab, ATH12K_DBG_MODE1_RECOVERY,
-			"mode:%d\n", ag->recovery_mode);
 	}
 	else {
 		ag->recovery_mode = ATH12K_MLO_RECOVERY_MODE0;
 	}
+       ath12k_info(ab, "Recovery is initiated with Mode%s\n",
+                   (ag->recovery_mode == ATH12K_MLO_RECOVERY_MODE0 ? "0" : "1"));
 
 	/* Sometimes the recovery will fail and then the next all recovery fail,
 	 * this is to avoid infinite recovery since it can not recovery success.
@@ -3123,6 +3123,7 @@ static void ath12k_core_reset(struct work_struct *work)
 				 */
 				ag->recovery_mode = ATH12K_MLO_RECOVERY_MODE0;
 			}
+			ath12k_info(ab, "Recovery is falling back to Mode0 as one of the partner chip is already in recovery\n");
 		}
 	}
 
@@ -3132,6 +3133,7 @@ static void ath12k_core_reset(struct work_struct *work)
 			/* Fallback to Mode0 if umac reset/peer_cleanup is
 			 * failed */
 			ag->recovery_mode = ATH12K_MLO_RECOVERY_MODE0;
+			ath12k_info(ab, "Recovery is falling back to Mode0\n");
 		} else {
 			/* wake queues here as ping should continue for
 			 * legacy clients in non-asserted chipsets
@@ -3142,6 +3144,8 @@ static void ath12k_core_reset(struct work_struct *work)
 					continue;
 
 				ieee80211_wake_queues(ah->hw);
+				ath12k_dbg(ab, ATH12K_DBG_MODE1_RECOVERY,
+					   "Queues are started as umac reset is completed for partner chipset\n");
 			}
 		}
 	}
@@ -3157,9 +3161,7 @@ static void ath12k_core_reset(struct work_struct *work)
 		 */
 		if (ag->recovery_mode == ATH12K_MLO_RECOVERY_MODE0 &&
 		    !test_bit(ATH12K_FLAG_RECOVERY, &partner_ab->dev_flags)) {
-			ath12k_dbg(ab, ATH12K_DBG_MODE1_RECOVERY,
-				"sending fw_hang cmd ar:%p\n",
-				partner_ab->pdevs[0].ar);
+			ath12k_info(ab, "sending fw_hang cmd to partner chipset(s)\n");
 			ath12k_wmi_force_fw_hang_cmd(partner_ab->pdevs[0].ar,
 						     ATH12K_WMI_FW_HANG_ASSERT_TYPE,
 						     ATH12K_WMI_FW_HANG_DELAY, true);
diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index 53074db..0248c32 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -850,6 +850,7 @@ enum ath12k_ap_ps_state {
 enum ath12k_fw_recovery_option {
 	 ATH12K_FW_RECOVERY_DISABLE = 0,
 	 ATH12K_FW_RECOVERY_ENABLE_AUTO, /* Automatically recover after FW assert */
+	 ATH12K_FW_RECOVERY_ENABLE_MODE1_AUTO, /* Automatically recover after FW assert through Mode1 */
 	 /* Enable only recovery. Send MPD SSR WMI */
 	 /* command to unlink UserPD assert from RootPD */
 	 ATH12K_FW_RECOVERY_ENABLE_SSR_ONLY,
@@ -1463,7 +1464,7 @@ struct ath12k_base {
 	struct timer_list mon_reap_timer;
 
 	struct completion htc_suspend;
-	bool fw_recovery_support;
+	enum ath12k_fw_recovery_option fw_recovery_support;
 
 	u32 fw_dbglog_param;
 	u64 fw_dbglog_val;
diff --git a/drivers/net/wireless/ath/ath12k/debugfs.c b/drivers/net/wireless/ath/ath12k/debugfs.c
index 66cb19a..596c08f 100644
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -1980,6 +1980,7 @@ static ssize_t ath12k_debug_write_fw_recovery(struct file *file,
 	struct ath12k_pdev *pdev;
 	struct ath12k_hw_group *ag;
 	unsigned int value;
+	enum wmi_fw_hang_recovery_mode_type recovery_mode;
 	int ret, radio_idx, radioup = 0;
 	int i;
 
@@ -1988,8 +1989,8 @@ static ssize_t ath12k_debug_write_fw_recovery(struct file *file,
 
 	if (value < ATH12K_FW_RECOVERY_DISABLE ||
 	    value > ATH12K_FW_RECOVERY_ENABLE_SSR_ONLY) {
-	         ath12k_warn(ab, "Please enter: 0 = Disable, 1 = Enable (auto recover),"
-	                     "2 = Enable SSR only");
+	         ath12k_warn(ab, "Please enter: 0 = Disable, 1 = Enable (auto recover), "
+			     "2 = Enable SSR Mode1, 3 = Enable SSR only");
 	         ret = -EINVAL;
 	         goto exit;
 	}
@@ -1997,9 +1998,9 @@ static ssize_t ath12k_debug_write_fw_recovery(struct file *file,
 	ag = ab->ag;
 
 	if (!value)
-		value = ATH12K_WMI_DISABLE_FW_RECOVERY;
+		recovery_mode = ATH12K_WMI_DISABLE_FW_RECOVERY;
 	else
-		value = (value == ATH12K_FW_RECOVERY_ENABLE_SSR_ONLY) ?
+		recovery_mode = (value == ATH12K_FW_RECOVERY_ENABLE_MODE1_AUTO) ?
 			ATH12K_WMI_FW_HANG_RECOVERY_MODE1 :
 			ATH12K_WMI_FW_HANG_RECOVERY_MODE0;
 
@@ -2007,7 +2008,7 @@ static ssize_t ath12k_debug_write_fw_recovery(struct file *file,
 		for (i = 0; i < ag->num_chip; i++) {
 			ab = ag->ab[i];
 			mutex_lock(&ab->core_lock);
-			ab->fw_recovery_support = value ? true : false;
+			ab->fw_recovery_support = value;
 			mutex_unlock(&ab->core_lock);
 
 			/*
@@ -2029,9 +2030,9 @@ static ssize_t ath12k_debug_write_fw_recovery(struct file *file,
 
 				if (radioup) {
 					ret = ath12k_wmi_force_fw_hang_cmd(ar,
-									   value,
+									   recovery_mode,
 									   ATH12K_WMI_FW_HANG_DELAY, false);
-					ath12k_info(ab, "setting FW assert mode [%d] ret [%d]\n", value, ret);
+					ath12k_info(ab, "setting FW assert mode [%d] ret [%d]\n", recovery_mode, ret);
 				} else
 					continue;
 			}
-- 
2.17.1

